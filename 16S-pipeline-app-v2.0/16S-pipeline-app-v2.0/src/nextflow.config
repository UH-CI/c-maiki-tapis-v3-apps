/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 */

params {
    enable_conda = false
    outdir = "$PWD/" + "16S-pipeline_outputs"
    single_end = false
    publish_dir_mode = "copy"
    
    // DADA2 quality filtering
    min_read_count = 200
    min_read_len = 20
    max_expected_error = 2
    trunc_quality = 2
    keep_phix = false
    pool = "F"
    trunc_len = "250,170"
    
    // DADA2 merging parameters
    min_overlap = 20
    max_mismatch = 1

    // Mothur parameters
    silva_db = "nr"
    criteria = 95 // mothur optimization criteria
    min_aln_len = 50
    chimera_tool = "vsearch"
    classification_consensus = 80
    taxa_to_filter = "Chloroplast-Mitochondria-unknown"
    clustering_thresholds = "100,99,97"
    min_abundance = 2 // Remove OTUs with a total abundance equal or below {min_abundance}
    compute_mothur_db = false

    // Subsampling
    skip_subsampling = false
    subsampling_quantile = 0.10
    min_subsampling = 1000
    custom_subsampling_level = -1

    // LULU parameters for merging a parent and a daughter OTU
    skip_lulu = false
    lulu_min_ratio_type = "min" // Function to compare the abundance of a parent OTU and its daughter (default: abundance=min(abundances over samples))
    lulu_min_ratio = 1 // Minimum abundance ratio between parent and daughter (across all samples)
    lulu_min_match = 97 // Identity between parent and daughter (max=100)
    lulu_min_rel_cooccurence = 1 // Proportion of the parent samples where daughter occurs (max=1)

    // Postprocessing filters
    skip_unifrac = false
    alpha_diversity = 'nseqs-sobs-chao-shannon-shannoneven'
    beta_diversity = 'braycurtis-thetayc-sharedsobs-sharedchao'
    unifrac = 'weighted'
}

params {
   max_cpus = 20
   max_memory = "90GB"
   max_time = "3d"
}

profiles {
  local {
    includeConfig '../conf/container.config'
	includeConfig '../conf/local.config'
  }
  local_test {
    includeConfig '../conf/container.config'
	includeConfig '../conf/local_test.config'
  }
  hpc {
  	includeConfig '../conf/container.config'
    includeConfig '../conf/hpc.config'
  }
  hpc_test {
    includeConfig '../conf/container.config'
	includeConfig '../conf/hpc_test.config'
  }
  gcp {
    includeConfig '../conf/container.config'
    includeConfig '../conf/gcp.config'
  }
  hpc_modules {
	includeConfig '../conf/uhm_modules.config'
	includeConfig '../conf/hpc.config'
  }
  hpc_modules_test {
	includeConfig '../conf/uhm_modules.config'
	includeConfig '../conf/hpc_test.config'
  }    
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}